name: Home assignment PL

on:
  # add the ability to run PL manually
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: get the code from repo
        uses: actions/checkout@v3

      - name: making sure that xml2 package is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y xml2

      - name: set incremental version
        run: |
          # converting the xml to flat file with xml2 so it will be easier to extract version number
          currentVersion=$(xml2 < myapp/pom.xml | grep -oP '/project/version=\K[^,]*')
          # setting IFS - internal field separato to '.' instead of default
          IFS='.' read -r majorVer minorVer patchVer <<< "$currentVersion"
          newversion="$majorVer.$minorVer.$((patchVer+1))"
          echo "New version: $newversion"
          sed -i "s|<version>$currentVersion</version>|<version>$newversion</version>|g" myapp/pom.xml
          # using special environment GITHUB_ENV so i will be able to call newversion on any other step
          echo "NEW_VERSION=$newversion" >> $GITHUB_ENV

      - name: Compile and Package
        run: mvn clean package -DskipTests
        working-directory: myapp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build --build-arg JAR_FILE=target/myapp-${{ env.NEW_VERSION }}.jar \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ env.NEW_VERSION }} .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ env.NEW_VERSION }}

      - name: Pull and Run Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ env.NEW_VERSION }}
          docker run --rm --name myapp -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ env.NEW_VERSION }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Helm Template
        run: |
          helm template myapp myapp-helm-chart/

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install myapp ./helm --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/myapp,image.tag=${{ env.newversion }}
